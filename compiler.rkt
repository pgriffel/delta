#lang racket

;; Generated code for Delta module 'compiler' 

(require delta/runtime)
(require delta/standard)
(require delta/io)
(require "ast.rkt")
(require "parser.rkt")
(require "scheme_ast.rkt")
(require "location.rkt")
(require "config.rkt")

(provide d_compile_file d_compile_project)

(define d_compile_file (lambda (l_p190 l_d191 l_l192 l_name) (let ((l_s189 (state (quote l_name) l_name))) (let ((l_s193 (merge-state l_s189 (let ((l_s194 (singleton-state (quote l_mod) (d_read_module #f #f #f (lookup (quote l_name) l_s189))))) (let ((l_s195 (merge-state l_s189 l_s194))) (let ((l_s196 l_s194)) (let ((l_s201 (singleton-state (quote l_file_name) (d_output_name #f #f #f (lookup (quote l_mod) l_s195))))) (let ((l_s202 (merge-state l_s195 l_s201))) (let ((l_s203 (merge-state (or l_s196 (empty-state)) l_s201))) (d_compile_module l_s203 #f #f (lookup (quote l_mod) l_s202) (lookup (quote l_file_name) l_s202))))))))))) (let ((l_t216 (let ((l_t217 (lookup (quote l_file_name) l_s193))) (let ((l_p218 l_p190)) (if l_p218 (merge-state l_p218 (if l_d191 (empty-state) l_t217)) (if l_d191 (empty-state) l_t217)))))) (if l_l192 (leave-collective l_l192 l_t216) l_t216))))))

(define d_compile_project (lambda (l_p222 l_d223 l_l224 l_name) (let ((l_s221 (state (quote l_name) l_name))) (let ((l_s225 (merge-state l_s221 (let ((l_s226 (singleton-state (quote l_modules) (d_read_project #f #f #f (lookup (quote l_name) l_s221))))) (let ((l_s227 (merge-state l_s221 l_s226))) (let ((l_s228 l_s226)) (let ((l_s233 (let ((l_s236 (merge-state l_s227 (singleton-state (quote l_unchecked) (lookup (quote l_modules) l_s227))))) (let ((l_s241 (empty-state))) (let ((l_s242 l_s236)) (begin (while (d_not_equal (lookup (quote l_unchecked) l_s242) (d_empty_list)) (let ((l_s243 (let ((l_s250 (let ((l_s253 (merge-state l_s242 (singleton-state (quote l_mod) (d_first (lookup (quote l_unchecked) l_s242)))))) (d_check_module #f #f #f (lookup (quote l_mod) l_s253) (d_accesable_names #f #f #f (lookup (quote l_mod) l_s253) (lookup (quote l_modules) l_s253)))))) (let ((l_s251 (merge-state l_s242 l_s250))) (let ((l_s252 l_s250)) (merge-state (or l_s252 (empty-state)) (singleton-state (quote l_unchecked) (d_rest (lookup (quote l_unchecked) l_s251))))))))) (begin (set! l_s241 (merge-state l_s241 l_s243)) (set! l_s242 (merge-state l_s242 l_s243))))) l_s241)))))) (let ((l_s234 (merge-state l_s227 l_s233))) (let ((l_s235 (merge-state (or l_s228 (empty-state)) l_s233))) (d_compile_concurrent l_s235 #f #f (lookup (quote l_modules) l_s234))))))))))) (d_output_name l_p222 l_d223 l_l224 (d_first (d_reverse #f #f #f (lookup (quote l_modules) l_s225))))))))

(define d_read_project (lambda (l_p940 l_d941 l_l942 l_name) (let ((l_s939 (state (quote l_name) l_name))) (let ((l_s943 (merge-state l_s939 (let ((l_s944 (singleton-state (quote l_discovered) (d_cons (lookup (quote l_name) l_s939) (d_empty_list))))) (let ((l_s945 (merge-state l_s939 l_s944))) (let ((l_s946 l_s944)) (let ((l_s955 (singleton-state (quote l_loaded) (d_empty_list)))) (let ((l_s956 (merge-state l_s945 l_s955))) (let ((l_s957 (merge-state (or l_s946 (empty-state)) l_s955))) (let ((l_s962 (singleton-state (quote l_modules) (d_empty_list)))) (let ((l_s963 (merge-state l_s956 l_s962))) (let ((l_s964 (merge-state (or l_s957 (empty-state)) l_s962))) (let ((l_s969 (empty-state))) (let ((l_s970 l_s963)) (begin (while (d_not_equal (lookup (quote l_discovered) l_s970) (d_empty_list)) (let ((l_s971 (let ((l_s978 (merge-state l_s970 (let ((l_s979 (singleton-state (quote l_name) (d_first (lookup (quote l_discovered) l_s970))))) (let ((l_s980 (merge-state l_s970 l_s979))) (let ((l_s981 l_s979)) (let ((l_s988 (singleton-state (quote l_mod) (d_read_module #f #f #f (lookup (quote l_name) l_s980))))) (let ((l_s989 (merge-state l_s980 l_s988))) (let ((l_s990 (merge-state (or l_s981 (empty-state)) l_s988))) (merge-state (or l_s990 (empty-state)) (singleton-state (quote l_includes) (d_map_list #f #f #f (lambda (l_p996 l_d997 l_l998 l_name) (let ((l_s995 (merge-state l_s989 (state (quote l_name) l_name)))) (let ((l_t1005 (let ((l_t1006 (d_format "$x.delta" (singleton-state (quote l_x) (lookup (quote l_name) l_s995))))) (let ((l_p1007 l_p996)) (if l_p1007 (merge-state l_p1007 (if l_d997 (empty-state) l_t1006)) (if l_d997 (empty-state) l_t1006)))))) (if l_l998 (leave-collective l_l998 l_t1005) l_t1005)))) (d_filter_list #f #f #f (lambda (l_p1009 l_d1010 l_l1011 l_x) (let ((l_s1008 (merge-state l_s989 (state (quote l_x) l_x)))) (let ((l_t1014 (let ((l_t1015 (not (d_is_system_module #f #f #f (lookup (quote l_x) l_s1008))))) (let ((l_p1016 l_p1009)) (if l_p1016 (merge-state l_p1016 (if l_d1010 (empty-state) l_t1015)) (if l_d1010 (empty-state) l_t1015)))))) (if l_l1011 (leave-collective l_l1011 l_t1014) l_t1014)))) (d_module_includes #f #f #f (lookup (quote l_mod) l_s989))))))))))))))) (let ((l_s1025 (singleton-state (quote l_loaded) (d_cons (lookup (quote l_name) l_s978) (lookup (quote l_loaded) l_s978))))) (let ((l_s1026 (merge-state l_s978 l_s1025))) (let ((l_s1027 l_s1025)) (let ((l_s1036 (singleton-state (quote l_discovered) (d_union #f #f #f (d_rest (lookup (quote l_discovered) l_s1026)) (d_difference #f #f #f (lookup (quote l_includes) l_s1026) (lookup (quote l_loaded) l_s1026)))))) (let ((l_s1037 (merge-state l_s1026 l_s1036))) (let ((l_s1038 (merge-state (or l_s1027 (empty-state)) l_s1036))) (merge-state (or l_s1038 (empty-state)) (singleton-state (quote l_modules) (d_cons (lookup (quote l_mod) l_s1037) (lookup (quote l_modules) l_s1037))))))))))))) (begin (set! l_s969 (merge-state l_s969 l_s971)) (set! l_s970 (merge-state l_s970 l_s971))))) (merge-state (or l_s964 (empty-state)) l_s969)))))))))))))))) (let ((l_t3185 (let ((l_t3186 (lookup (quote l_modules) l_s943))) (let ((l_p3187 l_p940)) (if l_p3187 (merge-state l_p3187 (if l_d941 (empty-state) l_t3186)) (if l_d941 (empty-state) l_t3186)))))) (if l_l942 (leave-collective l_l942 l_t3185) l_t3185))))))

(define d_check_module (lambda (l_p3191 l_d3192 l_l3193 l_mod l_globals) (let ((l_s3190 (state (quote l_mod) l_mod (quote l_globals) l_globals))) (let ((l_s3194 (merge-state l_s3190 (let ((l_s3195 (singleton-state (quote l_definitions) (d_module_definitions #f #f #f (lookup (quote l_mod) l_s3190))))) (let ((l_s3196 (merge-state l_s3190 l_s3195))) (let ((l_s3197 l_s3195)) (let ((l_s3202 (singleton-state (quote l_violations) (d_empty_list)))) (let ((l_s3203 (merge-state l_s3196 l_s3202))) (let ((l_s3204 (merge-state (or l_s3197 (empty-state)) l_s3202))) (merge-state (or l_s3204 (empty-state)) (singleton-state (quote l_okay) #t))))))))))) (let ((l_s3217 (let ((l_s3220 (empty-state))) (let ((l_s3221 l_s3194)) (begin (while (d_not_equal (lookup (quote l_definitions) l_s3221) (d_empty_list)) (let ((l_s3222 (let ((l_s3229 (let ((l_s3232 (merge-state l_s3221 (let ((l_s3233 (singleton-state (quote l_def) (d_first (lookup (quote l_definitions) l_s3221))))) (let ((l_s3234 (merge-state l_s3221 l_s3233))) (let ((l_s3235 l_s3233)) (merge-state (or l_s3235 (empty-state)) (singleton-state (quote l_violations) (d_scope_violations #f #f #f (d_definition_body #f #f #f (lookup (quote l_def) l_s3234)) (d_cons "skip" (d_empty_list)) (lookup (quote l_globals) l_s3234)))))))))) (if (d_not_equal (lookup (quote l_violations) l_s3232) (d_empty_list)) (let ((l_s3262 (d_print_line (d_format "\nErrors while compiling '$x' in module '$y':" (let ((l_s3267 (singleton-state (quote l_x) (d_definition_name #f #f #f (lookup (quote l_def) l_s3232))))) (let ((l_s3268 (merge-state l_s3232 l_s3267))) (let ((l_s3269 l_s3267)) (merge-state (or l_s3269 (empty-state)) (singleton-state (quote l_y) (d_module_name #f #f #f (lookup (quote l_mod) l_s3268))))))))))) (let ((l_s3263 (merge-state l_s3232 l_s3262))) (let ((l_s3264 l_s3262)) (let ((l_s3284 (let ((l_s3287 (empty-state))) (let ((l_s3288 l_s3263)) (begin (while (d_not_equal (lookup (quote l_violations) l_s3288) (d_empty_list)) (let ((l_s3289 (let ((l_s3296 (d_print_line (d_format "\n$y\n\n  $a '$x' unknown\n" (let ((l_s3301 (singleton-state (quote l_var) (d_first (lookup (quote l_violations) l_s3288))))) (let ((l_s3302 (merge-state l_s3288 l_s3301))) (let ((l_s3303 l_s3301)) (let ((l_s3310 (singleton-state (quote l_a) (if (lookup (quote l_is_global) (lookup (quote l_var) l_s3302)) "global" "variable")))) (let ((l_s3311 (merge-state l_s3302 l_s3310))) (let ((l_s3312 (merge-state (or l_s3303 (empty-state)) l_s3310))) (let ((l_s3323 (singleton-state (quote l_x) (lookup (quote l_name) (lookup (quote l_var) l_s3311))))) (let ((l_s3324 (merge-state l_s3311 l_s3323))) (let ((l_s3325 (merge-state (or l_s3312 (empty-state)) l_s3323))) (merge-state (or l_s3325 (empty-state)) (singleton-state (quote l_y) (d_range_text #f #f #f (d_node_range #f #f #f (lookup (quote l_var) l_s3324)))))))))))))))))) (let ((l_s3297 (merge-state l_s3288 l_s3296))) (let ((l_s3298 l_s3296)) (merge-state (or l_s3298 (empty-state)) (singleton-state (quote l_violations) (d_rest (lookup (quote l_violations) l_s3297))))))))) (begin (set! l_s3287 (merge-state l_s3287 l_s3289)) (set! l_s3288 (merge-state l_s3288 l_s3289))))) l_s3287))))) (let ((l_s3285 (merge-state l_s3263 l_s3284))) (let ((l_s3286 (merge-state (or l_s3264 (empty-state)) l_s3284))) (merge-state (or l_s3286 (empty-state)) (singleton-state (quote l_okay) #f)))))))) (empty-state))))) (let ((l_s3230 (merge-state l_s3221 l_s3229))) (let ((l_s3231 l_s3229)) (merge-state (or l_s3231 (empty-state)) (singleton-state (quote l_definitions) (d_rest (lookup (quote l_definitions) l_s3230))))))))) (begin (set! l_s3220 (merge-state l_s3220 l_s3222)) (set! l_s3221 (merge-state l_s3221 l_s3222))))) l_s3220))))) (let ((l_s3218 (merge-state l_s3194 l_s3217))) (let ((l_s3219 (let ((l_t3388 l_s3217)) (or l_p3191 (empty-state))))) (if (not (lookup (quote l_okay) l_s3218)) (let ((l_t3382 (let ((l_t3383 (d_throw "Compilation aborted\n"))) (or l_s3219 (empty-state))))) (if l_l3193 (leave-collective l_l3193 l_t3382) l_t3382)) (let ((l_t3385 (let ((l_t3386 (empty-state))) (or l_s3219 (empty-state))))) (if l_l3193 (leave-collective l_l3193 l_t3385) l_t3385))))))))))

(define d_compile_concurrent (lambda (l_p3393 l_d3394 l_l3395 l_modules) (let ((l_s3392 (state (quote l_modules) l_modules))) (if (d_not_equal (lookup (quote l_modules) l_s3392) (d_empty_list)) (let ((l_s3402 (merge-state l_s3392 (singleton-state (quote l_first) (d_first (lookup (quote l_modules) l_s3392)))))) (para (lambda (l_l3409) (d_compile_module l_p3393 #t l_l3409 (lookup (quote l_first) l_s3402) (d_output_name #f #f #f (lookup (quote l_first) l_s3402)))) (lambda (l_l3410) (d_compile_concurrent #f #t l_l3410 (d_rest (lookup (quote l_modules) l_s3402)))) l_l3395)) (let ((l_t3419 (let ((l_t3420 (empty-state))) (or l_p3393 (empty-state))))) (if l_l3395 (leave-collective l_l3395 l_t3419) l_t3419))))))

(define d_compile_module (lambda (l_p4978 l_d4979 l_l4980 l_mod l_dst_name) (let ((l_s4977 (state (quote l_mod) l_mod (quote l_dst_name) l_dst_name))) (let ((l_s4981 (merge-state l_s4977 (singleton-state (quote l_name) (d_module_name #f #f #f (lookup (quote l_mod) l_s4977)))))) (let ((l_s4986 (singleton-state (quote l_handle) (d_open_output_file (lookup (quote l_dst_name) l_s4981))))) (let ((l_s4987 (merge-state l_s4981 l_s4986))) (let ((l_s4988 (let ((l_t5962 l_s4986)) (or l_p4978 (empty-state))))) (let ((l_s4995 (d_write_line (lookup (quote l_handle) l_s4987) "#lang racket\n"))) (let ((l_s4996 (merge-state l_s4987 l_s4995))) (let ((l_s4997 (let ((l_t5960 l_s4995)) (or l_s4988 (empty-state))))) (let ((l_s5004 (d_write_line (lookup (quote l_handle) l_s4996) (d_format ";; Generated code for Delta module '$x' \n" (singleton-state (quote l_x) (lookup (quote l_name) l_s4996)))))) (let ((l_s5005 (merge-state l_s4996 l_s5004))) (let ((l_s5006 (let ((l_t5958 l_s5004)) (or l_s4997 (empty-state))))) (let ((l_s5674 (d_write_line (lookup (quote l_handle) l_s5005) "(require delta/runtime)"))) (let ((l_s5675 (merge-state l_s5005 l_s5674))) (let ((l_s5676 (let ((l_t5956 l_s5674)) (or l_s5006 (empty-state))))) (let ((l_s5683 (if (d_not_equal (lookup (quote l_name) l_s5675) "standard") (d_write_line (lookup (quote l_handle) l_s5675) "(require delta/standard)") (empty-state)))) (let ((l_s5684 (merge-state l_s5675 l_s5683))) (let ((l_s5685 (let ((l_t5954 l_s5683)) (or l_s5676 (empty-state))))) (let ((l_s5700 (let ((l_s5703 (merge-state l_s5684 (singleton-state (quote l_includes) (d_filter_list #f #f #f (lambda (l_p5705 l_d5706 l_l5707 l_x) (let ((l_s5704 (merge-state l_s5684 (state (quote l_x) l_x)))) (let ((l_t5712 (let ((l_t5713 (d_not_equal (lookup (quote l_x) l_s5704) "standard"))) (let ((l_p5714 l_p5705)) (if l_p5714 (merge-state l_p5714 (if l_d5706 (empty-state) l_t5713)) (if l_d5706 (empty-state) l_t5713)))))) (if l_l5707 (leave-collective l_l5707 l_t5712) l_t5712)))) (d_module_includes #f #f #f (lookup (quote l_mod) l_s5684))))))) (let ((l_s5719 (empty-state))) (let ((l_s5720 l_s5703)) (begin (while (d_not_equal (lookup (quote l_includes) l_s5720) (d_empty_list)) (let ((l_s5721 (let ((l_s5728 (let ((l_s5731 (merge-state l_s5720 (singleton-state (quote l_name) (d_first (lookup (quote l_includes) l_s5720)))))) (if (d_is_system_module #f #f #f (lookup (quote l_name) l_s5731)) (d_write_line (lookup (quote l_handle) l_s5731) (d_format "(require delta/$x)" (singleton-state (quote l_x) (lookup (quote l_name) l_s5731)))) (d_write_line (lookup (quote l_handle) l_s5731) (d_format "(require $c$x.rkt$c)" (let ((l_s5756 (singleton-state (quote l_c) #\"))) (let ((l_s5757 (merge-state l_s5731 l_s5756))) (let ((l_s5758 l_s5756)) (merge-state (or l_s5758 (empty-state)) (singleton-state (quote l_x) (lookup (quote l_name) l_s5757)))))))))))) (let ((l_s5729 (merge-state l_s5720 l_s5728))) (let ((l_s5730 l_s5728)) (merge-state (or l_s5730 (empty-state)) (singleton-state (quote l_includes) (d_rest (lookup (quote l_includes) l_s5729))))))))) (begin (set! l_s5719 (merge-state l_s5719 l_s5721)) (set! l_s5720 (merge-state l_s5720 l_s5721))))) l_s5719)))))) (let ((l_s5701 (merge-state l_s5684 l_s5700))) (let ((l_s5702 (let ((l_t5952 l_s5700)) (or l_s5685 (empty-state))))) (let ((l_s5783 (let ((l_s5786 (merge-state l_s5701 (singleton-state (quote l_public_elements) (d_public_definitions #f #f #f (lookup (quote l_mod) l_s5701)))))) (if (d_not_equal (lookup (quote l_public_elements) l_s5786) (d_empty_list)) (let ((l_s5797 (d_write (lookup (quote l_handle) l_s5786) "\n(provide"))) (let ((l_s5798 (merge-state l_s5786 l_s5797))) (let ((l_s5799 l_s5797)) (let ((l_s5806 (let ((l_s5809 (empty-state))) (let ((l_s5810 l_s5798)) (begin (while (d_not_equal (lookup (quote l_public_elements) l_s5810) (d_empty_list)) (let ((l_s5811 (let ((l_s5818 (d_write (lookup (quote l_handle) l_s5810) " "))) (let ((l_s5819 (merge-state l_s5810 l_s5818))) (let ((l_s5820 l_s5818)) (let ((l_s5827 (d_write (lookup (quote l_handle) l_s5819) (d_scheme_name #f #f #f (d_definition_name #f #f #f (d_first (lookup (quote l_public_elements) l_s5819))))))) (let ((l_s5828 (merge-state l_s5819 l_s5827))) (let ((l_s5829 (merge-state (or l_s5820 (empty-state)) l_s5827))) (merge-state (or l_s5829 (empty-state)) (singleton-state (quote l_public_elements) (d_rest (lookup (quote l_public_elements) l_s5828)))))))))))) (begin (set! l_s5809 (merge-state l_s5809 l_s5811)) (set! l_s5810 (merge-state l_s5810 l_s5811))))) l_s5809))))) (let ((l_s5807 (merge-state l_s5798 l_s5806))) (let ((l_s5808 (merge-state (or l_s5799 (empty-state)) l_s5806))) (merge-state (or l_s5808 (empty-state)) (d_write (lookup (quote l_handle) l_s5807) ")\n")))))))) (empty-state))))) (let ((l_s5784 (merge-state l_s5701 l_s5783))) (let ((l_s5785 (let ((l_t5950 l_s5783)) (or l_s5702 (empty-state))))) (let ((l_s5862 (let ((l_s5865 (merge-state l_s5784 (singleton-state (quote l_elements) (d_module_definitions #f #f #f (lookup (quote l_mod) l_s5784)))))) (let ((l_s5870 (empty-state))) (let ((l_s5871 l_s5865)) (begin (while (d_not_equal (lookup (quote l_elements) l_s5871) (d_empty_list)) (let ((l_s5872 (let ((l_s5879 (let ((l_s5882 (merge-state l_s5871 (singleton-state (quote l_def) (d_first (lookup (quote l_elements) l_s5871)))))) (d_write_line (lookup (quote l_handle) l_s5882) (d_format "\n(define $x $y)" (let ((l_s5893 (singleton-state (quote l_x) (d_scheme_name #f #f #f (d_definition_name #f #f #f (lookup (quote l_def) l_s5882)))))) (let ((l_s5894 (merge-state l_s5882 l_s5893))) (let ((l_s5895 l_s5893)) (merge-state (or l_s5895 (empty-state)) (singleton-state (quote l_y) (d_scheme_string #f #f #f (d_definition_body #f #f #f (lookup (quote l_def) l_s5894))))))))))))) (let ((l_s5880 (merge-state l_s5871 l_s5879))) (let ((l_s5881 l_s5879)) (merge-state (or l_s5881 (empty-state)) (singleton-state (quote l_elements) (d_rest (lookup (quote l_elements) l_s5880))))))))) (begin (set! l_s5870 (merge-state l_s5870 l_s5872)) (set! l_s5871 (merge-state l_s5871 l_s5872))))) l_s5870)))))) (let ((l_s5863 (merge-state l_s5784 l_s5862))) (let ((l_s5864 (let ((l_t5948 l_s5862)) (or l_s5785 (empty-state))))) (let ((l_s5920 (if (d_is_member #f #f #f "main" (d_map_list #f #f #f d_definition_name (d_module_definitions #f #f #f (lookup (quote l_mod) l_s5863)))) (d_write_line (lookup (quote l_handle) l_s5863) (d_format "\n\n$call" (singleton-state (quote l_call) (d_main_call #f #f #f)))) (empty-state)))) (let ((l_s5921 (merge-state l_s5863 l_s5920))) (let ((l_s5922 (let ((l_t5946 l_s5920)) (or l_s5864 (empty-state))))) (let ((l_t5943 (let ((l_t5944 (d_close_file (lookup (quote l_handle) l_s5921)))) (or l_s5922 (empty-state))))) (if l_l4980 (leave-collective l_l4980 l_t5943) l_t5943)))))))))))))))))))))))))))))))))

(define d_output_name (lambda (l_p5967 l_d5968 l_l5969 l_mod) (let ((l_s5966 (state (quote l_mod) l_mod))) (d_replace_suffix l_p5967 l_d5968 l_l5969 (d_module_name #f #f #f (lookup (quote l_mod) l_s5966)) ".rkt"))))

(define d_scheme_name (lambda (l_p7020 l_d7021 l_l7022 l_name) (let ((l_s7019 (state (quote l_name) l_name))) (d_scheme_string l_p7020 l_d7021 l_l7022 (d_make_variable #f #f #f (lookup (quote l_name) l_s7019) #t (d_no_range #f #f #f))))))

(define d_public_definitions (lambda (l_p7030 l_d7031 l_l7032 l_mod) (let ((l_s7029 (state (quote l_mod) l_mod))) (d_filter_list l_p7030 l_d7031 l_l7032 d_definition_is_public (d_module_definitions #f #f #f (lookup (quote l_mod) l_s7029))))))

(define d_accesable_names (lambda (l_p7040 l_d7041 l_l7042 l_mod l_modules) (let ((l_s7039 (state (quote l_mod) l_mod (quote l_modules) l_modules))) (let ((l_s7043 (merge-state l_s7039 (let ((l_s7044 (singleton-state (quote l_definitions) (d_module_definitions #f #f #f (lookup (quote l_mod) l_s7039))))) (let ((l_s7045 (merge-state l_s7039 l_s7044))) (let ((l_s7046 l_s7044)) (let ((l_s7051 (singleton-state (quote l_includes) (d_module_includes #f #f #f (lookup (quote l_mod) l_s7045))))) (let ((l_s7052 (merge-state l_s7045 l_s7051))) (let ((l_s7053 (merge-state (or l_s7046 (empty-state)) l_s7051))) (let ((l_s7058 (singleton-state (quote l_to_include) (lookup (quote l_modules) l_s7052)))) (let ((l_s7059 (merge-state l_s7052 l_s7058))) (let ((l_s7060 (merge-state (or l_s7053 (empty-state)) l_s7058))) (let ((l_s7065 (empty-state))) (let ((l_s7066 l_s7059)) (begin (while (d_not_equal (lookup (quote l_to_include) l_s7066) (d_empty_list)) (let ((l_s7067 (let ((l_s7074 (let ((l_s7077 (merge-state l_s7066 (singleton-state (quote l_first) (d_first (lookup (quote l_to_include) l_s7066)))))) (if (d_is_member #f #f #f (d_module_name #f #f #f (lookup (quote l_first) l_s7077)) (lookup (quote l_includes) l_s7077)) (singleton-state (quote l_definitions) (d_append #f #f #f (lookup (quote l_definitions) l_s7077) (d_public_definitions #f #f #f (lookup (quote l_first) l_s7077)))) (empty-state))))) (let ((l_s7075 (merge-state l_s7066 l_s7074))) (let ((l_s7076 l_s7074)) (merge-state (or l_s7076 (empty-state)) (singleton-state (quote l_to_include) (d_rest (lookup (quote l_to_include) l_s7075))))))))) (begin (set! l_s7065 (merge-state l_s7065 l_s7067)) (set! l_s7066 (merge-state l_s7066 l_s7067))))) (merge-state (or l_s7060 (empty-state)) l_s7065)))))))))))))))) (let ((l_t7112 (let ((l_t7113 (lookup (quote l_definitions) l_s7043))) (let ((l_p7114 l_p7040)) (if l_p7114 (merge-state l_p7114 (if l_d7041 (empty-state) l_t7113)) (if l_d7041 (empty-state) l_t7113)))))) (if l_l7042 (leave-collective l_l7042 l_t7112) l_t7112))))))

(define d_main_call (lambda (l_p7118 l_d7119 l_l7120) (let ((l_s7117 (state))) (let ((l_s7121 (merge-state l_s7117 (let ((l_s7122 (singleton-state (quote l_handler) (let ((l_s7125 (merge-state l_s7117 (singleton-state (quote l_err_var) (d_gen_scheme_var #f #f #f "err"))))) (d_scheme_lambda #f #f #f (d_cons (lookup (quote l_err_var) l_s7125) (d_empty_list)) (d_scheme_application #f #f #f "displayln" (d_cons (d_scheme_application #f #f #f "exn-message" (d_cons (lookup (quote l_err_var) l_s7125) (d_empty_list))) (d_empty_list)))))))) (let ((l_s7123 (merge-state l_s7117 l_s7122))) (let ((l_s7124 l_s7122)) (merge-state (or l_s7124 (empty-state)) (singleton-state (quote l_body) (d_scheme_application #f #f #f "vector->list" (d_cons (d_scheme_application #f #f #f "current-command-line-arguments" (d_empty_list)) (d_empty_list))))))))))) (d_scheme_let l_p7118 l_d7119 l_l7120 (d_scheme_atom #f #f #f "dummy") (d_scheme_application #f #f #f "with-handlers" (d_cons (d_scheme_list #f #f #f (d_cons (d_scheme_list #f #f #f (d_cons (d_scheme_atom #f #f #f "exn:fail?") (d_cons (lookup (quote l_handler) l_s7121) (d_empty_list)))) (d_empty_list))) (d_cons (d_scheme_application #f #f #f (d_scheme_name #f #f #f "main") (d_cons (d_scheme_false #f #f #f) (d_cons (d_scheme_false #f #f #f) (d_cons (d_scheme_false #f #f #f) (d_cons (lookup (quote l_body) l_s7121) (d_empty_list)))))) (d_empty_list)))) (d_scheme_application #f #f #f "void" (d_empty_list)))))))
