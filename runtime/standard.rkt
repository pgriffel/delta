#lang racket

;; Generated code for Delta module 'standard' 

(require delta/runtime)

(provide d_second d_third d_append d_fold d_reverse d_is_member d_map_list d_filter_list d_nth d_union d_intersection d_difference d_naturals d_do_list d_replace_suffix d_intercalate d_min d_max d_swap d_do_times d_do_array d_array_sum)

(define d_second (lambda (l_p48 l_d49 l_l50 l_x) (let ((l_s47 (state (quote l_x) l_x))) (let ((l_t55 (let ((l_t56 (d_first (d_rest (lookup (quote l_x) l_s47))))) (let ((l_p57 l_p48)) (if l_p57 (merge-state l_p57 (if l_d49 (empty-state) l_t56)) (if l_d49 (empty-state) l_t56)))))) (if l_l50 (leave-collective l_l50 l_t55) l_t55)))))

(define d_third (lambda (l_p61 l_d62 l_l63 l_x) (let ((l_s60 (state (quote l_x) l_x))) (let ((l_t70 (let ((l_t71 (d_first (d_rest (d_rest (lookup (quote l_x) l_s60)))))) (let ((l_p72 l_p61)) (if l_p72 (merge-state l_p72 (if l_d62 (empty-state) l_t71)) (if l_d62 (empty-state) l_t71)))))) (if l_l63 (leave-collective l_l63 l_t70) l_t70)))))

(define d_append (lambda (l_p76 l_d77 l_l78 l_x l_y) (let ((l_s75 (state (quote l_x) l_x (quote l_y) l_y))) (let ((l_s79 (merge-state l_s75 (let ((l_s80 (singleton-state (quote l_xrev) (d_reverse #f #f #f (lookup (quote l_x) l_s75))))) (let ((l_s81 (merge-state l_s75 l_s80))) (let ((l_s82 l_s80)) (let ((l_s87 (singleton-state (quote l_tmp) (lookup (quote l_y) l_s81)))) (let ((l_s88 (merge-state l_s81 l_s87))) (let ((l_s89 (merge-state (or l_s82 (empty-state)) l_s87))) (let ((l_s94 (empty-state))) (let ((l_s95 l_s88)) (begin (while (d_not_equal (lookup (quote l_xrev) l_s95) (d_empty_list)) (let ((l_s96 (let ((l_s103 (singleton-state (quote l_tmp) (d_cons (d_first (lookup (quote l_xrev) l_s95)) (lookup (quote l_tmp) l_s95))))) (let ((l_s104 (merge-state l_s95 l_s103))) (let ((l_s105 l_s103)) (merge-state (or l_s105 (empty-state)) (singleton-state (quote l_xrev) (d_rest (lookup (quote l_xrev) l_s104))))))))) (begin (set! l_s94 (merge-state l_s94 l_s96)) (set! l_s95 (merge-state l_s95 l_s96))))) (merge-state (or l_s89 (empty-state)) l_s94))))))))))))) (let ((l_t130 (let ((l_t131 (lookup (quote l_tmp) l_s79))) (let ((l_p132 l_p76)) (if l_p132 (merge-state l_p132 (if l_d77 (empty-state) l_t131)) (if l_d77 (empty-state) l_t131)))))) (if l_l78 (leave-collective l_l78 l_t130) l_t130))))))

(define d_fold (lambda (l_p136 l_d137 l_l138 l_f l_x l_xs) (let ((l_s135 (state (quote l_f) l_f (quote l_x) l_x (quote l_xs) l_xs))) (let ((l_s139 (merge-state l_s135 (let ((l_s140 (singleton-state (quote l_folded) (lookup (quote l_x) l_s135)))) (let ((l_s141 (merge-state l_s135 l_s140))) (let ((l_s142 l_s140)) (let ((l_s147 (empty-state))) (let ((l_s148 l_s141)) (begin (while (d_not_equal (lookup (quote l_xs) l_s148) (d_empty_list)) (let ((l_s149 (let ((l_s156 (singleton-state (quote l_folded) (d_apply #f #f #f (lookup (quote l_f) l_s148) (d_tuple (lookup (quote l_folded) l_s148) (d_first (lookup (quote l_xs) l_s148))))))) (let ((l_s157 (merge-state l_s148 l_s156))) (let ((l_s158 l_s156)) (merge-state (or l_s158 (empty-state)) (singleton-state (quote l_xs) (d_rest (lookup (quote l_xs) l_s157))))))))) (begin (set! l_s147 (merge-state l_s147 l_s149)) (set! l_s148 (merge-state l_s148 l_s149))))) (merge-state (or l_s142 (empty-state)) l_s147)))))))))) (let ((l_t183 (let ((l_t184 (lookup (quote l_folded) l_s139))) (let ((l_p185 l_p136)) (if l_p185 (merge-state l_p185 (if l_d137 (empty-state) l_t184)) (if l_d137 (empty-state) l_t184)))))) (if l_l138 (leave-collective l_l138 l_t183) l_t183))))))

(define d_reverse (lambda (l_p189 l_d190 l_l191 l_x) (let ((l_s188 (state (quote l_x) l_x))) (let ((l_s192 (merge-state l_s188 (let ((l_s193 (singleton-state (quote l_y) (d_empty_list)))) (let ((l_s194 (merge-state l_s188 l_s193))) (let ((l_s195 l_s193)) (let ((l_s200 (empty-state))) (let ((l_s201 l_s194)) (begin (while (d_not_equal (lookup (quote l_x) l_s201) (d_empty_list)) (let ((l_s202 (let ((l_s209 (singleton-state (quote l_y) (d_cons (d_first (lookup (quote l_x) l_s201)) (lookup (quote l_y) l_s201))))) (let ((l_s210 (merge-state l_s201 l_s209))) (let ((l_s211 l_s209)) (merge-state (or l_s211 (empty-state)) (singleton-state (quote l_x) (d_rest (lookup (quote l_x) l_s210))))))))) (begin (set! l_s200 (merge-state l_s200 l_s202)) (set! l_s201 (merge-state l_s201 l_s202))))) (merge-state (or l_s195 (empty-state)) l_s200)))))))))) (let ((l_t234 (let ((l_t235 (lookup (quote l_y) l_s192))) (let ((l_p236 l_p189)) (if l_p236 (merge-state l_p236 (if l_d190 (empty-state) l_t235)) (if l_d190 (empty-state) l_t235)))))) (if l_l191 (leave-collective l_l191 l_t234) l_t234))))))

(define d_is_member (lambda (l_p240 l_d241 l_l242 l_element l_list) (let ((l_s239 (state (quote l_element) l_element (quote l_list) l_list))) (if (equal? (lookup (quote l_list) l_s239) (d_empty_list)) (let ((l_t249 (let ((l_t250 #f)) (let ((l_p251 l_p240)) (if l_p251 (merge-state l_p251 (if l_d241 (empty-state) l_t250)) (if l_d241 (empty-state) l_t250)))))) (if l_l242 (leave-collective l_l242 l_t249) l_t249)) (if (equal? (lookup (quote l_element) l_s239) (d_first (lookup (quote l_list) l_s239))) (let ((l_t260 (let ((l_t261 #t)) (let ((l_p262 l_p240)) (if l_p262 (merge-state l_p262 (if l_d241 (empty-state) l_t261)) (if l_d241 (empty-state) l_t261)))))) (if l_l242 (leave-collective l_l242 l_t260) l_t260)) (d_is_member l_p240 l_d241 l_l242 (lookup (quote l_element) l_s239) (d_rest (lookup (quote l_list) l_s239))))))))

(define d_map_list (lambda (l_p272 l_d273 l_l274 l_fn l_list) (let ((l_s271 (state (quote l_fn) l_fn (quote l_list) l_list))) (let ((l_s275 (merge-state l_s271 (let ((l_s276 (singleton-state (quote l_mapped) (d_empty_list)))) (let ((l_s277 (merge-state l_s271 l_s276))) (let ((l_s278 l_s276)) (let ((l_s283 (empty-state))) (let ((l_s284 l_s277)) (begin (while (not (equal? (lookup (quote l_list) l_s284) (d_empty_list))) (let ((l_s285 (let ((l_s294 (singleton-state (quote l_mapped) (d_cons (d_apply #f #f #f (lookup (quote l_fn) l_s284) (d_tuple (d_first (lookup (quote l_list) l_s284)))) (lookup (quote l_mapped) l_s284))))) (let ((l_s295 (merge-state l_s284 l_s294))) (let ((l_s296 l_s294)) (merge-state (or l_s296 (empty-state)) (singleton-state (quote l_list) (d_rest (lookup (quote l_list) l_s295))))))))) (begin (set! l_s283 (merge-state l_s283 l_s285)) (set! l_s284 (merge-state l_s284 l_s285))))) (merge-state (or l_s278 (empty-state)) l_s283)))))))))) (d_reverse l_p272 l_d273 l_l274 (lookup (quote l_mapped) l_s275))))))

(define d_filter_list (lambda (l_p328 l_d329 l_l330 l_fn l_list) (let ((l_s327 (state (quote l_fn) l_fn (quote l_list) l_list))) (let ((l_s331 (merge-state l_s327 (let ((l_s332 (singleton-state (quote l_filtered) (d_empty_list)))) (let ((l_s333 (merge-state l_s327 l_s332))) (let ((l_s334 l_s332)) (let ((l_s339 (empty-state))) (let ((l_s340 l_s333)) (begin (while (not (equal? (lookup (quote l_list) l_s340) (d_empty_list))) (let ((l_s341 (let ((l_s350 (if (d_apply #f #f #f (lookup (quote l_fn) l_s340) (d_tuple (d_first (lookup (quote l_list) l_s340)))) (singleton-state (quote l_filtered) (d_cons (d_first (lookup (quote l_list) l_s340)) (lookup (quote l_filtered) l_s340))) (empty-state)))) (let ((l_s351 (merge-state l_s340 l_s350))) (let ((l_s352 l_s350)) (merge-state (or l_s352 (empty-state)) (singleton-state (quote l_list) (d_rest (lookup (quote l_list) l_s351))))))))) (begin (set! l_s339 (merge-state l_s339 l_s341)) (set! l_s340 (merge-state l_s340 l_s341))))) (merge-state (or l_s334 (empty-state)) l_s339)))))))))) (d_reverse l_p328 l_d329 l_l330 (lookup (quote l_filtered) l_s331))))))

(define d_nth (lambda (l_p390 l_d391 l_l392 l_index l_list) (let ((l_s389 (state (quote l_index) l_index (quote l_list) l_list))) (if (d_less (lookup (quote l_index) l_s389) 0) (let ((l_t407 (let ((l_t408 (d_throw (d_format "Index $x for nth is negative" (singleton-state (quote l_x) (lookup (quote l_index) l_s389)))))) (let ((l_p409 l_p390)) (if l_p409 (merge-state l_p409 (if l_d391 (empty-state) l_t408)) (if l_d391 (empty-state) l_t408)))))) (if l_l392 (leave-collective l_l392 l_t407) l_t407)) (let ((l_s410 (merge-state l_s389 (let ((l_s411 (singleton-state (quote l_i) (lookup (quote l_index) l_s389)))) (let ((l_s412 (merge-state l_s389 l_s411))) (let ((l_s413 l_s411)) (let ((l_s418 (empty-state))) (let ((l_s419 l_s412)) (begin (while (d_not_equal (lookup (quote l_i) l_s419) 0) (let ((l_s420 (let ((l_s427 (singleton-state (quote l_i) (- (lookup (quote l_i) l_s419) 1)))) (let ((l_s428 (merge-state l_s419 l_s427))) (let ((l_s429 l_s427)) (merge-state (or l_s429 (empty-state)) (singleton-state (quote l_list) (d_rest (lookup (quote l_list) l_s428))))))))) (begin (set! l_s418 (merge-state l_s418 l_s420)) (set! l_s419 (merge-state l_s419 l_s420))))) (merge-state (or l_s413 (empty-state)) l_s418)))))))))) (if (equal? (lookup (quote l_list) l_s410) (d_empty_list)) (let ((l_t464 (let ((l_t465 (d_throw (d_format "Index $x for nth is out of range" (singleton-state (quote l_x) (lookup (quote l_index) l_s410)))))) (let ((l_p466 l_p390)) (if l_p466 (merge-state l_p466 (if l_d391 (empty-state) l_t465)) (if l_d391 (empty-state) l_t465)))))) (if l_l392 (leave-collective l_l392 l_t464) l_t464)) (let ((l_t469 (let ((l_t470 (d_first (lookup (quote l_list) l_s410)))) (let ((l_p471 l_p390)) (if l_p471 (merge-state l_p471 (if l_d391 (empty-state) l_t470)) (if l_d391 (empty-state) l_t470)))))) (if l_l392 (leave-collective l_l392 l_t469) l_t469))))))))

(define d_union (lambda (l_p475 l_d476 l_l477 l_a l_b) (let ((l_s474 (state (quote l_a) l_a (quote l_b) l_b))) (d_append l_p475 l_d476 l_l477 (d_filter_list #f #f #f (lambda (l_p479 l_d480 l_l481 l_x) (let ((l_s478 (merge-state l_s474 (state (quote l_x) l_x)))) (let ((l_t486 (let ((l_t487 (not (d_is_member #f #f #f (lookup (quote l_x) l_s478) (lookup (quote l_b) l_s478))))) (let ((l_p488 l_p479)) (if l_p488 (merge-state l_p488 (if l_d480 (empty-state) l_t487)) (if l_d480 (empty-state) l_t487)))))) (if l_l481 (leave-collective l_l481 l_t486) l_t486)))) (lookup (quote l_a) l_s474)) (lookup (quote l_b) l_s474)))))

(define d_intersection (lambda (l_p496 l_d497 l_l498 l_a l_b) (let ((l_s495 (state (quote l_a) l_a (quote l_b) l_b))) (d_filter_list l_p496 l_d497 l_l498 (lambda (l_p500 l_d501 l_l502 l_x) (let ((l_s499 (merge-state l_s495 (state (quote l_x) l_x)))) (d_is_member l_p500 l_d501 l_l502 (lookup (quote l_x) l_s499) (lookup (quote l_b) l_s499)))) (lookup (quote l_a) l_s495)))))

(define d_difference (lambda (l_p512 l_d513 l_l514 l_a l_b) (let ((l_s511 (state (quote l_a) l_a (quote l_b) l_b))) (d_filter_list l_p512 l_d513 l_l514 (lambda (l_p516 l_d517 l_l518 l_x) (let ((l_s515 (merge-state l_s511 (state (quote l_x) l_x)))) (let ((l_t523 (let ((l_t524 (not (d_is_member #f #f #f (lookup (quote l_x) l_s515) (lookup (quote l_b) l_s515))))) (let ((l_p525 l_p516)) (if l_p525 (merge-state l_p525 (if l_d517 (empty-state) l_t524)) (if l_d517 (empty-state) l_t524)))))) (if l_l518 (leave-collective l_l518 l_t523) l_t523)))) (lookup (quote l_a) l_s511)))))

(define d_naturals (lambda (l_p531 l_d532 l_l533 l_n) (let ((l_s530 (state (quote l_n) l_n))) (let ((l_s534 (merge-state l_s530 (let ((l_s535 (singleton-state (quote l_numbers) (d_empty_list)))) (let ((l_s536 (merge-state l_s530 l_s535))) (let ((l_s537 l_s535)) (let ((l_s542 (empty-state))) (let ((l_s543 l_s536)) (begin (while (d_not_equal (lookup (quote l_n) l_s543) 0) (let ((l_s544 (let ((l_s551 (singleton-state (quote l_n) (- (lookup (quote l_n) l_s543) 1)))) (let ((l_s552 (merge-state l_s543 l_s551))) (let ((l_s553 l_s551)) (merge-state (or l_s553 (empty-state)) (singleton-state (quote l_numbers) (d_cons (lookup (quote l_n) l_s552) (lookup (quote l_numbers) l_s552))))))))) (begin (set! l_s542 (merge-state l_s542 l_s544)) (set! l_s543 (merge-state l_s543 l_s544))))) (merge-state (or l_s537 (empty-state)) l_s542)))))))))) (let ((l_t576 (let ((l_t577 (lookup (quote l_numbers) l_s534))) (let ((l_p578 l_p531)) (if l_p578 (merge-state l_p578 (if l_d532 (empty-state) l_t577)) (if l_d532 (empty-state) l_t577)))))) (if l_l533 (leave-collective l_l533 l_t576) l_t576))))))

(define d_do_list (lambda (l_p582 l_d583 l_l584 l_xs l_action) (let ((l_s581 (state (quote l_xs) l_xs (quote l_action) l_action))) (let ((l_s585 (empty-state))) (let ((l_s586 l_s581)) (begin (while (d_not_equal (lookup (quote l_xs) l_s586) (d_empty_list)) (let ((l_s587 (let ((l_s594 (d_apply #f #t #f (lookup (quote l_action) l_s586) (d_tuple (d_first (lookup (quote l_xs) l_s586)))))) (let ((l_s595 (merge-state l_s586 l_s594))) (let ((l_s596 l_s594)) (merge-state (or l_s596 (empty-state)) (singleton-state (quote l_xs) (d_rest (lookup (quote l_xs) l_s595))))))))) (begin (set! l_s585 (merge-state l_s585 l_s587)) (set! l_s586 (merge-state l_s586 l_s587))))) (let ((l_t613 (let ((l_t614 l_s585)) (or l_p582 (empty-state))))) (if l_l584 (leave-collective l_l584 l_t613) l_t613))))))))

(define d_replace_suffix (lambda (l_p619 l_d620 l_l621 l_string l_suffix) (let ((l_s618 (state (quote l_string) l_string (quote l_suffix) l_suffix))) (let ((l_s622 (merge-state l_s618 (let ((l_s623 (singleton-state (quote l_chars) (d_characters (lookup (quote l_string) l_s618))))) (let ((l_s624 (merge-state l_s618 l_s623))) (let ((l_s625 l_s623)) (let ((l_s632 (singleton-state (quote l_shortened) (d_empty_list)))) (let ((l_s633 (merge-state l_s624 l_s632))) (let ((l_s634 (merge-state (or l_s625 (empty-state)) l_s632))) (let ((l_s639 (empty-state))) (let ((l_s640 l_s633)) (begin (while (if (d_not_equal (lookup (quote l_chars) l_s640) (d_empty_list)) (d_not_equal (d_first (lookup (quote l_chars) l_s640)) #\.) #f) (let ((l_s641 (let ((l_s658 (singleton-state (quote l_shortened) (d_cons (d_first (lookup (quote l_chars) l_s640)) (lookup (quote l_shortened) l_s640))))) (let ((l_s659 (merge-state l_s640 l_s658))) (let ((l_s660 l_s658)) (merge-state (or l_s660 (empty-state)) (singleton-state (quote l_chars) (d_rest (lookup (quote l_chars) l_s659))))))))) (begin (set! l_s639 (merge-state l_s639 l_s641)) (set! l_s640 (merge-state l_s640 l_s641))))) (merge-state (or l_s634 (empty-state)) l_s639))))))))))))) (let ((l_t702 (let ((l_t703 (d_format "$x$y" (let ((l_s687 (singleton-state (quote l_x) (d_string (d_reverse #f #f #f (lookup (quote l_shortened) l_s622)))))) (let ((l_s688 (merge-state l_s622 l_s687))) (let ((l_s689 l_s687)) (merge-state (or l_s689 (empty-state)) (singleton-state (quote l_y) (lookup (quote l_suffix) l_s688))))))))) (let ((l_p704 l_p619)) (if l_p704 (merge-state l_p704 (if l_d620 (empty-state) l_t703)) (if l_d620 (empty-state) l_t703)))))) (if l_l621 (leave-collective l_l621 l_t702) l_t702))))))

(define d_intercalate (lambda (l_p708 l_d709 l_l710 l_strings l_delimiter) (let ((l_s707 (state (quote l_strings) l_strings (quote l_delimiter) l_delimiter))) (if (equal? (lookup (quote l_strings) l_s707) (d_empty_list)) (let ((l_t717 (let ((l_t718 "")) (let ((l_p719 l_p708)) (if l_p719 (merge-state l_p719 (if l_d709 (empty-state) l_t718)) (if l_d709 (empty-state) l_t718)))))) (if l_l710 (leave-collective l_l710 l_t717) l_t717)) (let ((l_s720 (merge-state l_s707 (let ((l_s721 (singleton-state (quote l_calated) (d_first (lookup (quote l_strings) l_s707))))) (let ((l_s722 (merge-state l_s707 l_s721))) (let ((l_s723 l_s721)) (let ((l_s730 (singleton-state (quote l_strings) (d_rest (lookup (quote l_strings) l_s722))))) (let ((l_s731 (merge-state l_s722 l_s730))) (let ((l_s732 (merge-state (or l_s723 (empty-state)) l_s730))) (let ((l_s739 (empty-state))) (let ((l_s740 l_s731)) (begin (while (d_not_equal (lookup (quote l_strings) l_s740) (d_empty_list)) (let ((l_s741 (let ((l_s748 (singleton-state (quote l_calated) (d_format "$cal$sep$new" (let ((l_s753 (singleton-state (quote l_cal) (lookup (quote l_calated) l_s740)))) (let ((l_s754 (merge-state l_s740 l_s753))) (let ((l_s755 l_s753)) (let ((l_s760 (singleton-state (quote l_sep) (lookup (quote l_delimiter) l_s754)))) (let ((l_s761 (merge-state l_s754 l_s760))) (let ((l_s762 (merge-state (or l_s755 (empty-state)) l_s760))) (merge-state (or l_s762 (empty-state)) (singleton-state (quote l_new) (d_first (lookup (quote l_strings) l_s761)))))))))))))) (let ((l_s749 (merge-state l_s740 l_s748))) (let ((l_s750 l_s748)) (merge-state (or l_s750 (empty-state)) (singleton-state (quote l_strings) (d_rest (lookup (quote l_strings) l_s749))))))))) (begin (set! l_s739 (merge-state l_s739 l_s741)) (set! l_s740 (merge-state l_s740 l_s741))))) (merge-state (or l_s732 (empty-state)) l_s739))))))))))))) (let ((l_t795 (let ((l_t796 (lookup (quote l_calated) l_s720))) (let ((l_p797 l_p708)) (if l_p797 (merge-state l_p797 (if l_d709 (empty-state) l_t796)) (if l_d709 (empty-state) l_t796)))))) (if l_l710 (leave-collective l_l710 l_t795) l_t795)))))))

(define d_min (lambda (l_p801 l_d802 l_l803 l_x l_y) (let ((l_s800 (state (quote l_x) l_x (quote l_y) l_y))) (if (d_less (lookup (quote l_x) l_s800) (lookup (quote l_y) l_s800)) (let ((l_t810 (let ((l_t811 (lookup (quote l_x) l_s800))) (let ((l_p812 l_p801)) (if l_p812 (merge-state l_p812 (if l_d802 (empty-state) l_t811)) (if l_d802 (empty-state) l_t811)))))) (if l_l803 (leave-collective l_l803 l_t810) l_t810)) (let ((l_t813 (let ((l_t814 (lookup (quote l_y) l_s800))) (let ((l_p815 l_p801)) (if l_p815 (merge-state l_p815 (if l_d802 (empty-state) l_t814)) (if l_d802 (empty-state) l_t814)))))) (if l_l803 (leave-collective l_l803 l_t813) l_t813))))))

(define d_max (lambda (l_p819 l_d820 l_l821 l_x l_y) (let ((l_s818 (state (quote l_x) l_x (quote l_y) l_y))) (if (d_greater (lookup (quote l_x) l_s818) (lookup (quote l_y) l_s818)) (let ((l_t828 (let ((l_t829 (lookup (quote l_x) l_s818))) (let ((l_p830 l_p819)) (if l_p830 (merge-state l_p830 (if l_d820 (empty-state) l_t829)) (if l_d820 (empty-state) l_t829)))))) (if l_l821 (leave-collective l_l821 l_t828) l_t828)) (let ((l_t831 (let ((l_t832 (lookup (quote l_y) l_s818))) (let ((l_p833 l_p819)) (if l_p833 (merge-state l_p833 (if l_d820 (empty-state) l_t832)) (if l_d820 (empty-state) l_t832)))))) (if l_l821 (leave-collective l_l821 l_t831) l_t831))))))

(define d_swap (lambda (l_p837 l_d838 l_l839 l_array l_i l_j) (let ((l_s836 (state (quote l_array) l_array (quote l_i) l_i (quote l_j) l_j))) (let ((l_s840 (merge-state l_s836 (singleton-state (quote l_tmp) (d_get (lookup (quote l_array) l_s836) (lookup (quote l_i) l_s836)))))) (let ((l_s849 (d_set (lookup (quote l_array) l_s840) (lookup (quote l_i) l_s840) (d_get (lookup (quote l_array) l_s840) (lookup (quote l_j) l_s840))))) (let ((l_s850 (merge-state l_s840 l_s849))) (let ((l_s851 (let ((l_t873 l_s849)) (or l_p837 (empty-state))))) (let ((l_t870 (let ((l_t871 (d_set (lookup (quote l_array) l_s850) (lookup (quote l_j) l_s850) (lookup (quote l_tmp) l_s850)))) (or l_s851 (empty-state))))) (if l_l839 (leave-collective l_l839 l_t870) l_t870)))))))))

(define d_do_times (lambda (l_p878 l_d879 l_l880 l_n l_action) (let ((l_s877 (state (quote l_n) l_n (quote l_action) l_action))) (let ((l_s881 (merge-state l_s877 (singleton-state (quote l_i) (lookup (quote l_n) l_s877))))) (let ((l_s886 (empty-state))) (let ((l_s887 l_s881)) (begin (while (d_not_equal (lookup (quote l_i) l_s887) 0) (let ((l_s888 (let ((l_s895 (singleton-state (quote l_i) (- (lookup (quote l_i) l_s887) 1)))) (let ((l_s896 (merge-state l_s887 l_s895))) (let ((l_s897 l_s895)) (d_apply l_s897 #t #f (lookup (quote l_action) l_s896) (d_tuple (lookup (quote l_i) l_s896)))))))) (begin (set! l_s886 (merge-state l_s886 l_s888)) (set! l_s887 (merge-state l_s887 l_s888))))) (let ((l_t914 (let ((l_t915 l_s886)) (or l_p878 (empty-state))))) (if l_l880 (leave-collective l_l880 l_t914) l_t914)))))))))

(define d_do_array (lambda (l_p920 l_d921 l_l922 l_array l_action) (let ((l_s919 (state (quote l_array) l_array (quote l_action) l_action))) (d_do_times l_p920 #t l_l922 (d_array_length (lookup (quote l_array) l_s919)) (lookup (quote l_action) l_s919)))))

(define d_array_sum (lambda (l_p932 l_d933 l_l934 l_array) (let ((l_s931 (state (quote l_array) l_array))) (let ((l_s935 (merge-state l_s931 (let ((l_s936 (singleton-state (quote l_sum) 0))) (let ((l_s937 (merge-state l_s931 l_s936))) (let ((l_s938 l_s936)) (let ((l_s943 (singleton-state (quote l_i) (d_array_length (lookup (quote l_array) l_s937))))) (let ((l_s944 (merge-state l_s937 l_s943))) (let ((l_s945 (merge-state (or l_s938 (empty-state)) l_s943))) (let ((l_s952 (empty-state))) (let ((l_s953 l_s944)) (begin (while (d_not_equal (lookup (quote l_i) l_s953) 0) (let ((l_s954 (let ((l_s961 (singleton-state (quote l_i) (- (lookup (quote l_i) l_s953) 1)))) (let ((l_s962 (merge-state l_s953 l_s961))) (let ((l_s963 l_s961)) (merge-state (or l_s963 (empty-state)) (singleton-state (quote l_sum) (+ (lookup (quote l_sum) l_s962) (d_get (lookup (quote l_array) l_s962) (lookup (quote l_i) l_s962)))))))))) (begin (set! l_s952 (merge-state l_s952 l_s954)) (set! l_s953 (merge-state l_s953 l_s954))))) (merge-state (or l_s945 (empty-state)) l_s952))))))))))))) (let ((l_t992 (let ((l_t993 (lookup (quote l_sum) l_s935))) (let ((l_p994 l_p932)) (if l_p994 (merge-state l_p994 (if l_d933 (empty-state) l_t993)) (if l_d933 (empty-state) l_t993)))))) (if l_l934 (leave-collective l_l934 l_t992) l_t992))))))
